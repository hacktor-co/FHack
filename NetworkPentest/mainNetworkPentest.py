try:
    from src.Colors import TextColor
    from Config.RecOS import IsOSDarwin, IsOSLinux
    from .Networkdetails.CollectNetworkInfo import CollectNetworkInfo
    from os import getcwd, path, mkdir
    import subprocess as subproc
except Exception as error:
    raise SystemExit, '\033[31m' + "%s" % error + '\033[0m'

define_UTIL_PackagePath = getcwd() + "/NetworkPentest/Utility"


def CheckDep():
    """
    Check all dependency that network tool want
    """

    if IsOSLinux():
        if not path.exists(define_UTIL_PackagePath + "/GetIpInterf.out"):
            print TextColor.WARNING + "[*] Please wait for build network tool [Collect IP Interface]" + TextColor.GREEN
            command = ['gcc', define_UTIL_PackagePath + "/GetAllIntefaceIps.c", '-o',
                       define_UTIL_PackagePath + '/GetIpInterf.out']
            subproc.Popen(command, stdout=subproc.PIPE, stderr=subproc.PIPE)
            print TextColor.GREEN + "[+] Done" + TextColor.WHITE

    elif IsOSDarwin():
        if not path.exists(define_UTIL_PackagePath + "/GetIpInterf"):
            print TextColor.WARNING + "[*] Please wait for build network tool [Collect IP Interface]" + TextColor.GREEN
            command = ['gcc', define_UTIL_PackagePath + "/GetAllIntefaceIps.c", '-o',
                       define_UTIL_PackagePath + '/GetIpInterf']
            subproc.Popen(command, stdout=subproc.PIPE, stderr=subproc.PIPE)
            print TextColor.GREEN + "[+] Done" + TextColor.WHITE


def mainNetworkPentest():
    CheckDep()

    if not path.exists('./outputs/NetworkPentest'):
        mkdir('./outputs/NetworkPentest')

    selectedItem = raw_input(TextColor.CVIOLET + '~ Fhack/# Select item: ' + TextColor.WHITE)

    if selectedItem == '1':
        CollectNetworkInfo()
    elif selectedItem == '0':
        print
        return
