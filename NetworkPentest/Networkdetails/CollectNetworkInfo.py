try:
    from NetworkPentest.Utility.IpCreator import CreateIp
    from src.Colors import TextColor
    import socket as sock
    from Config.RecOS import IsOSDarwin, IsOSLinux
    from os import getcwd, path
    import subprocess
    from socket import herror, gethostbyaddr
    from multiprocessing import Pool, cpu_count
    import src.libs as lib
    import nmap
except Exception as error:
    raise SystemExit, '\033[31m' + '%s' % error + '\033[0m'

define_UTIL_PackagePath = getcwd() + "/NetworkPentest/Utility"

VAR_allInfo = list()


def MASK():
    print TextColor.GREEN + """
             _   _      _                      _
            | \ | | ___| |___      _____  _ __| | __
            |  \| |/ _ \ __\ \ /\ / / _ \| '__| |/ /
            | |\  |  __/ |_ \ V  V / (_) | |  |   < 
            |_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\\
                                                    
             ____  _                                   
            |  _ \(_)___  ___ _____   _____ _ __ _   _ 
            | | | | / __|/ __/ _ \ \ / / _ \ '__| | | |
            | |_| | \__ \ (_| (_) \ V /  __/ |  | |_| |
            |____/|_|___/\___\___/ \_/ \___|_|   \__, |
                                                 |___/ 
                                                 
    """ + TextColor.WHITE

    print TextColor.WARNING + "\t\t Your private IP is: "
    print

    if IsOSLinux():
        command = [define_UTIL_PackagePath + '/GetIpInterf.out']
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        result = process.communicate()[0]

    elif IsOSDarwin():
        command = [define_UTIL_PackagePath + '/GetIpInterf']
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        result = process.communicate()[0]

    print result + TextColor.WHITE
    print


def run_thread(ip):
    try:

        deviceInfo = gethostbyaddr(ip)
        deviceName = deviceInfo[0]
        deviceIp = deviceInfo[2]

        nm = nmap.PortScanner()
        nm.scan(ip)
        deviceState = nm[ip].state()


        try:
            nvm = nm.scan(hosts=ip, arguments='-sU -p 161 -T4 -d -v -n -Pn --script snmp-interfaces')
            for k, v in nvm['scan'].iteritems():
                deviceMac = str(v['vendor'].keys()[0])
                deviceVendor = str(v['vendor'].values()[0])
        except Exception:
                deviceVendor = ""
                deviceMac = ""

        return str(deviceIp[0]) + '=?' + str(deviceName) + "=?" + str(deviceState) + "=?" + str(deviceVendor) + "=?" + \
                    str(deviceMac)

    except Exception:
        try:
            nm = nmap.PortScanner()
            nm.scan(ip)
            deviceState = nm[ip].state()

            try:
                nvm = nm.scan(host=ip, arguments='-sU -p 161 -T4 -d -v -n -Pn --script snmp-interfaces')
                for k, v in nvm['scan'].iteritems():
                    deviceMac = str(v['vendor'].keys()[0])
                    deviceVendor = str(v['vendor'].values()[0])
            except Exception:
                deviceVendor = ""
                deviceMac = ""

            if deviceState == 'up':
                return str(ip) + "=?" + str("") + "=?" + str("up") + "=?" + str(deviceVendor) + "=?" + \
                    str(deviceMac)
            else:
                pass
        except Exception:
            return None


def UseIPCreator():
    ip = raw_input(TextColor.CBLUE + "\t~ Fhack/# Enter ip range e.g:(192.168.1.1-192.168.1.100): " + TextColor.WHITE)

    print

    ipList = list()
    for item in CreateIp(ip):
        ipList.append(str(item))

    print TextColor.WARNING + '[+] Please wait to get all devices' + TextColor.WHITE

    # create multi thread and then check urls that exists or not
    pool = Pool(processes=cpu_count() + 10)
    varAllInfos = pool.map(run_thread, ipList)
    # End

    counter = 0
    make_table = lib.mytable(['Count', 'IP', 'Device Name', 'MAC Address', 'Host state', 'Vendor'])
    for item in varAllInfos:
        if item is not None:
            infos = item.split('=?')

            # infos[0] => Ip
            # infos[1] => device name
            # infos[2] => device status
            # infos[3] => device vendor
            # infos[4] => device mac

            try:
                make_table.add_row([str(counter), str(infos[0]), str(infos[1]),
                                    str(infos[4]), str(infos[2]), str(infos[3])])
            except Exception:
                pass

            counter += 1

    print TextColor.CYELLOW + str(make_table) + TextColor.WHITE

    with open('./outputs/NetworkPentest/netDiscovery.txt', 'w') as file:
        file.write(str(make_table))

    pool.join()

    print
    print


def UseIPCalculator():
    """
    With this function we create range of IPs with net mask calculation
    :return:
    """
    # todo = Complete This step


def CollectNetworkInfo():
    MASK()

    print TextColor.CYAN + "\t\t [1] Use IPCreator for range of IP"
    print "\t\t [2] Use NetMask for IP Calculator"
    print "\t\t [3] Use single IP"
    print '\t\t [0] Exit' + TextColor.WHITE
    print

    selectedItem = raw_input(TextColor.CVIOLET + '~ Fhack/# Selecte item: ' + TextColor.WHITE)

    if selectedItem == '1':
        UseIPCreator()
    elif selectedItem == '2':
        pass
    elif selectedItem == '3':
        pass
    elif selectedItem == '0':
        print
        return
    else:
        print TextColor.RED + '[-] Please select item <0-3>' + TextColor.WHITE
