# -*- coding: utf-8 -*-
try:

    from src.Colors import TextColor
    from Config.WebConfig import define_headerdata

    import requests
    from time import sleep
    from sys import stdout
    import sys
    reload(sys)
    sys.setdefaultencoding("utf-8")
    import json

except Exception as error:
    raise SystemExit, TextColor.RED + '[-] Something is wrong when importing the libraries as: %s ' % error + TextColor.WHITE


class FindVulnerability:

    def __init__(self, url, lang):
        """
        :type lang: str => web site language
        """
        self.url = url

        assert isinstance(lang, str)
        self.lang = lang

        self.firstResponse = requests.get(url=self.url, headers=define_headerdata, verify=False)

    def __CheckVulnerability__(self, content):
        """ Check the output of the injection for knowing that the site is injectable or not
            :param: contnet => get response content that check the error exist in it or not
            :return: dictionary of database and character that show error of sql
        """
        if self.lang == 'PHP':

            with open("./WebAttack/sqlinjection/payloads/ErrorBaseResult.json") as jsonFile:
                errorListMysql = json.load(jsonFile)
                for item in errorListMysql["mysql"]:
                    if content.find(item) is not -1:
                        return 'mysql'

            if str(content).decode('utf-8') != str(self.firstResponse.text).decode('utf-8'):
                return 'maybe it is mysql'

        elif self.lang == 'ASP.net':

            with open("./WebAttack/sqlinjection/payloads/ErrorBaseResult.json") as jsonFile:
                errorListMysql = json.load(jsonFile)
                for item in errorListMysql["sqlserver"]:
                    if content.find(item) is not -1:
                        return 'MSsql'

            if content != self.firstResponse.text:
                return 'maybe it is MSsql'

        return 'none'

    def VulnerableBy(self):
        """ first we check that entered url is vulnerable or not
            :param: url => get url of web site
            :return: character that the url send reaction with it
        """

        print TextColor.WARNING + '[!] Please wait for check the site for vulnerability ...'
        print

        with open("./WebAttack/sqlinjection/payloads/InjectionChars.json") as jsonFile:
            payloads = json.load(jsonFile)

            for item in payloads["defInjectionChars"]:

                resposne = requests.get(url=self.url + str(item), headers=define_headerdata, verify=False)
                result = self.__CheckVulnerability__(content=resposne.text)

                if result != 'none':
                    print TextColor.RED + '\t[+] %s ' % (self.url + str(item)) + " => vulnerable" + TextColor.WHITE
                    return {'database': result, 'char': item}
                else:
                    print TextColor.GREEN + '\t[+] %s ' % (self.url + str(item)) + " => clear" + TextColor.WHITE
                    continue

                sleep(.5)

    def Start(self):
        """ Start testing then return the character of injected
        """

        print TextColor.WHITESMOKE + "[+] Start searching for vulnerability ..." + TextColor.WHITE
        sleep(.1)

        result = self.VulnerableBy()

        if result is not None:
            print
            print TextColor.GREEN + "[!] Database: %s" % result['database'] + TextColor.WHITE
            return result
        else:
            print
            return None
